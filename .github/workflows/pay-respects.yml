name: pay-respects

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:      # Allows manual trigger

jobs:
  update-formula:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0  # Need history to check current version

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(grep -m 1 'version' Formula/pay-respects.rb | cut -d '"' -f 2)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Fetch latest release info
        id: fetch-release
        run: |
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/iffse/pay-respects/releases/latest")
          VERSION=$(echo "$RELEASE_INFO" | jq -r .tag_name | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get download URLs and calculate SHA256
          ARM_URL="https://github.com/iffse/pay-respects/releases/download/v${VERSION}/pay-respects-${VERSION}-aarch64-apple-darwin.tar.zst"
          X86_URL="https://github.com/iffse/pay-respects/releases/download/v${VERSION}/pay-respects-${VERSION}-x86_64-apple-darwin.tar.zst"
          
          ARM_SHA256=$(curl -sL "$ARM_URL" | sha256sum | cut -d ' ' -f 1)
          X86_SHA256=$(curl -sL "$X86_URL" | sha256sum | cut -d ' ' -f 1)
          
          echo "arm_sha256=$ARM_SHA256" >> $GITHUB_OUTPUT
          echo "x86_sha256=$X86_SHA256" >> $GITHUB_OUTPUT

      - name: Delete old branches
        if: steps.current.outputs.version != steps.fetch-release.outputs.version
        run: |
          git branch -r | grep 'origin/pay-respects-' | while read -r branch; do
            branch=${branch#origin/}
            git push origin --delete "$branch"
          done
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Update Formula and README
        if: steps.current.outputs.version != steps.fetch-release.outputs.version
        run: |
          VERSION="${{ steps.fetch-release.outputs.version }}"
          ARM_SHA256="${{ steps.fetch-release.outputs.arm_sha256 }}"
          X86_SHA256="${{ steps.fetch-release.outputs.x86_sha256 }}"
          
          # Update Formula
          cat > Formula/pay-respects.rb << EOL
          class PayRespects < Formula
            desc "CLI tool to pay respects"
            homepage "https://github.com/iffse/pay-respects"
            version "${VERSION}"

            if Hardware::CPU.arm?
              url "https://github.com/iffse/pay-respects/releases/download/v${VERSION}/pay-respects-${VERSION}-aarch64-apple-darwin.tar.zst"
              sha256 "${ARM_SHA256}"
            else
              url "https://github.com/iffse/pay-respects/releases/download/v${VERSION}/pay-respects-${VERSION}-x86_64-apple-darwin.tar.zst"
              sha256 "${X86_SHA256}"
            end

            def install
              bin.install "pay-respects"
              # Install required modules
              bin.install "_pay-respects-module-100-runtime-rules"
              bin.install "_pay-respects-fallback-100-request-ai"
            end

            test do
              system "#{bin}/pay-respects", "--version"
            end
          end
          EOL

          # Update README version
          sed -i "s/\`pay-respects\`].*|\s*\`[0-9.]*\`\s*|/\`pay-respects\`] | \`${VERSION}\` |/" README.md

      - name: Create Pull Request
        if: steps.current.outputs.version != steps.fetch-release.outputs.version
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT }}
          commit-message: "chore: update pay-respects to version ${{ steps.fetch-release.outputs.version }}"
          title: "Update pay-respects to version ${{ steps.fetch-release.outputs.version }}"
          body: |
            Automated update of pay-respects to version ${{ steps.fetch-release.outputs.version }}
            
            - Updated version to ${{ steps.fetch-release.outputs.version }}
            - Updated SHA256 checksums for both ARM and x86_64 builds
            - Updated version in README.md
          branch: pay-respects-${{ steps.fetch-release.outputs.version }}
          delete-branch: true

      - name: Enable Auto-Merge
        if: steps.current.outputs.version != steps.fetch-release.outputs.version && steps.cpr.outputs.pull-request-number
        run: |
          # Wait for status checks to complete (max 2 minutes)
          for i in {1..24}; do
            status=$(gh pr view "${{ steps.cpr.outputs.pull-request-number }}" --json mergeable -q .mergeable)
            if [ "$status" = "MERGEABLE" ]; then
              gh pr merge --auto --merge "${{ steps.cpr.outputs.pull-request-number }}"
              break
            fi
            sleep 5
          done
        env:
          GH_TOKEN: ${{ secrets.PAT }} 